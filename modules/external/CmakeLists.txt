# Add raylib as a subdirectory
add_subdirectory(raylib)
# Create an interface library to represent raylib
add_library(external INTERFACE)

# Link raylib to the external interface library
target_link_libraries(external INTERFACE raylib)

# Set properties for the external library
set_target_properties(external PROPERTIES
    FOLDER "modules/external"
    CXX_VISIBILITY_PRESET hidden            # Hide symbols by default
    VISIBILITY_INLINES_HIDDEN YES           # Hide inline symbols as well
)

# Organize raylib and other targets under a unified folder structure
set_target_properties(raylib PROPERTIES FOLDER "modules/external/raylib")

# Define additional targets associated with raylib if they exist
set_target_properties(uninstall PROPERTIES FOLDER "modules/external/raylib")
foreach(raylib_target IN LISTS uninstall update_mappings glfw)
    if(TARGET ${raylib_target})
        set_target_properties(${raylib_target} PROPERTIES FOLDER "modules/external/raylib")
    endif()
endforeach()
set_target_properties(update_mappings PROPERTIES FOLDER "modules/external/raylib")
set_target_properties(glfw PROPERTIES FOLDER "modules/external/raylib")

target_include_directories(external INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/include")

# OpenCV setup
set(OpenCV_VERSION "4.8.0")
set(OpenCV_DIR "${CMAKE_CURRENT_SOURCE_DIR}/opencv")

# Define essential OpenCV modules and disable extras for a minimal build
set(BUILD_LIST "core,imgproc" CACHE STRING "Subset of OpenCV modules to build")
set(BUILD_opencv_videoio OFF CACHE BOOL "Disable videoio module")
set(BUILD_EXAMPLES OFF CACHE BOOL "Don't build examples")
set(BUILD_TESTS OFF CACHE BOOL "Don't build tests")
set(BUILD_JAVA OFF CACHE BOOL "Don't build Java bindings")

# Add OpenCV as a subdirectory with the designated build directory
add_subdirectory(${OpenCV_DIR} ${OpenCV_BINARY_DIR})

# Link core OpenCV modules to the main project target
target_link_libraries(${PROJECT_NAME} INTERFACE opencv_core opencv_imgproc)

# Specify OpenCV include directories
target_include_directories(${PROJECT_NAME} INTERFACE ${OpenCV_DIR}/include
${CMAKE_BINARY_DIR})

# Collect all include directories within OpenCV modules
file(GLOB OPENCV_INCLUDE_DIRS "${OpenCV_DIR}/modules/*/include")

# Add include directories for OpenCV modules if they exist
if(DEFINED OPENCV_INCLUDE_DIRS)
    target_include_directories(${PROJECT_NAME} INTERFACE ${OPENCV_INCLUDE_DIRS})
endif()

set_target_properties(opencv_dnn_plugins PROPERTIES FOLDER "modules/external/opencv")
set_target_properties(opencv_highgui_plugins PROPERTIES FOLDER "modules/external/opencv")
set_target_properties(opencv_videoio_plugins PROPERTIES FOLDER "modules/external/opencv")
set_target_properties(opencv_core PROPERTIES FOLDER "modules/external/opencv")
set_target_properties(opencv_imgproc PROPERTIES FOLDER "modules/external/opencv")
set_target_properties(opencv_modules PROPERTIES FOLDER "modules/external/opencv")
set_target_properties(opencv_perf_tests PROPERTIES FOLDER "modules/external/opencv")

# Install core OpenCV libraries and headers to the build/install directory
install(TARGETS opencv_core opencv_imgproc DESTINATION lib)
install(DIRECTORY ${opencv_SOURCE_DIR}/include/opencv2 DESTINATION include/opencv2)