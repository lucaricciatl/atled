cmake_minimum_required(VERSION 3.10)
project(MyProject)

# Define directories for raylib
set(RAYLIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/raylib)
set(RAYLIB_INCLUDE_DIR ${RAYLIB_DIR}/src)
set(RAYLIB_LIB_DIR ${RAYLIB_DIR}/lib)

# Add subdirectories for external libraries
add_subdirectory(${RAYLIB_DIR})
add_subdirectory(json)

# Create raylibcpp target from our source file
add_library(raylibcpp ${CMAKE_CURRENT_SOURCE_DIR}/src/raylib.cpp)
add_library(raylibcpp::raylibcpp ALIAS raylibcpp)

# Link libraries: raylib and geometry must be defined in one of the subdirectories
target_link_libraries(raylibcpp PUBLIC raylib geometry)

target_include_directories(raylibcpp
    PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/include  
    PRIVATE
        ${RAYLIB_INCLUDE_DIR}  
        ${GEOMETRY_INCLUDE_DIR}
)

# Optionally, create an "external" target if needed. Note: 
# This duplicates the same source file as raylibcpp. Adjust if this is not intended.
add_library(external ${CMAKE_CURRENT_SOURCE_DIR}/src/raylib.cpp)
target_link_libraries(external PUBLIC raylibcpp geometry nlohmann_json)
target_include_directories(external PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include 
    ${GEOMETRY_INCLUDE_DIR}
)

# Organize targets under a unified folder structure
set_target_properties(raylibcpp PROPERTIES FOLDER "modules/external")
set_target_properties(raylib PROPERTIES FOLDER "modules/external")
set_target_properties(external PROPERTIES FOLDER "modules/external")

# Set folder properties for additional targets if they exist
foreach(target uninstall glfw update_mappings)
    if(TARGET ${target})
        set_target_properties(${target} PROPERTIES FOLDER "modules/external")
    endif()
endforeach()

# Set JSON system include property for clang-tidy purposes
set(JSON_SystemInclude "Include as system headers (skip for clang-tidy)." ON)
set_target_properties(nlohmann_json PROPERTIES FOLDER "modules/external")
