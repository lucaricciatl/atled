# Create a library from the submodule's source files
add_library(graphics
    src/GraphicsContext.cpp
    src/GraphicsManager.cpp
    src/Polyline3D.cpp
    src/Polygon2DImpl.cpp
    src/LayerManager.cpp
    src/BuffersManager.cpp
    src/TriangleBuffer2D.cpp
    src/PolygonBuffer2D.cpp
    src/Layer.cpp
    src/Pixel.cpp
    src/rectangle.cpp 
    src/RegularPolygon.cpp 
    src/Circle.cpp 
    src/Polygon.cpp 
    src/Arc.cpp
    src/Model2D.cpp
    src/Model2DFactory.cpp
    src/Rectangle.cpp
    src/Line.cpp
    src/Polyline.cpp 
    src/Triangle.cpp
    src/Triangulation.cpp
    src/RaylibWindow.cpp 
    src/windowFactory.cpp 
    src/RaylibDisplay.cpp 
    src/displayFactory.cpp
    src/Raylibtext.cpp 
    src/textFactory.cpp
    src/RaylibFontLoader.cpp 
    src/fontLoaderFactory.cpp
    src/RaylibCamera3D.cpp 
    src/RaylibCamera2D.cpp 
    src/CameraFactory.cpp
    src/RaylibShader.cpp
    src/shaderFactory.cpp
)

# Link gfx to the graphics library
target_link_libraries(graphics PUBLIC common external)

# Specify include directories for the submodule
target_include_directories(graphics PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${gfx_SOURCE_DIR}/include
)

target_include_directories(graphics PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include/private
    ${CMAKE_CURRENT_SOURCE_DIR}/include/buffers
    ${CMAKE_CURRENT_SOURCE_DIR}/include/context
    ${CMAKE_CURRENT_SOURCE_DIR}/include/graphics
    ${CMAKE_CURRENT_SOURCE_DIR}/include/layers
    ${CMAKE_CURRENT_SOURCE_DIR}/include/camera 
    ${CMAKE_CURRENT_SOURCE_DIR}/include/Models
    ${CMAKE_CURRENT_SOURCE_DIR}/include/utils
    ${CMAKE_CURRENT_SOURCE_DIR}/include/display
    ${CMAKE_CURRENT_SOURCE_DIR}/include/window
    ${CMAKE_CURRENT_SOURCE_DIR}/include/fonts
    ${CMAKE_CURRENT_SOURCE_DIR}/include/shader
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../common/include
)

set_target_properties(graphics PROPERTIES FOLDER "modules")


# Specify the directory containing your shaders
set(SHADER_DIR ${CMAKE_CURRENT_SOURCE_DIR}/shaders)

# Collect all shader files
file(GLOB SHADER_FILES ${SHADER_DIR}/*)

# Specify the directory containing your shaders
set(SHADER_DIR ${CMAKE_CURRENT_SOURCE_DIR}/shaders)

# Collect all shader files
file(GLOB SHADER_FILES ${SHADER_DIR}/*)

# Ensure the resources/shaders directory is created in the Debug directory
add_custom_command(
    TARGET graphics POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory
        ../../Debug/resources/shaders
    COMMENT "Creating resources/shaders directory in Debug directory"
)

# Collect all shader files
file(GLOB SHADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/shaders/*)

# Copy shader files to the resources/shaders folder after building the graphics target
foreach(SHADER_FILE ${SHADER_FILES})
    get_filename_component(SHADER_NAME ${SHADER_FILE} NAME)

    # Debug: Print the name and source path of the shader
    message(STATUS "Copying shader file: ${SHADER_FILE} as ${SHADER_NAME}")

    add_custom_command(
        TARGET graphics POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            ${SHADER_FILE}
            $<TARGET_FILE_DIR:graphics>../../../../Debug/resources/shaders/${SHADER_NAME}
        COMMENT "Copying shader: ${SHADER_NAME} to $<TARGET_FILE_DIR:graphics>/resources/shaders"
    )
endforeach()
